dsml (Doesn't Suck Markup Language, pronounced "dismal") is a terse, simple markup language for when XML is simply overkill or overhead (so pretty much all the time).

What is dsml?
-----------------------------------------

dsml (Doesn't Suck Markup Language, pronounced "dismal") is a terse, simple markup language for when XML is simply overkill or overhead (so pretty much all the time).

dsml doesn't bother with types, schemas or other nonsense. It's simple, straightforward and most importantly, terse.

Writing dsml
-----------------------------------------

dsml only has one type of element, the "node". In it's simplest form a node is simply a name. For example:

(mynode)

A node always has a name, may have attributes, and may have children or may have a value.

A node with attributes:

(mynode attr="value")

A node with a value:

(mynode "value")

A node with attributes and a value:

(mynode attr="value" "something")

A node can contain any number of child nodes. For example:

(mynode (node1) (node2) (node3))

An example with child nodes and attributes:

(mynode (node1 attr="value") (node2 (node3 "some value")))

A full example to configure some imaginary pieve of software:


(myapp version="1.1"
  (home "C:/Tools/MyApp")
  (install-date "20100712")
  (last-user-login "20100722")
  (screen
    (size "800x600")
    (resolution "1280x1024")
    (last-window-position x="100" y="24")
  )
)


Parsing dsml
-----------------------------------------

In general, dsml users will simply point the dsml parser at an input stream, allow the parser to build a dsml model and then traverse the model. There are three model classes: Document, Attribute, and Node

Attribute is exactly what you think it is, a name/value pair. A Document represnts a dsml document, it simply wraps root nodes (note that unlike XML, a dsml document can have any number of "root" nodes, a document is therefore a forest of dsml trees). The Node class is the primary class for dealing with dsml documents. It provides access to a node's name, it's value (if it has a value), it's attributes (if it has attributes), or any children nodes (if it has child nodes). The Node instances merely represent a tree.

Parsing Example (DOM style):


  java.io.Reader in = /* Create a reader */

  ModelBuildingContext ctx = DefaultFactory.createContext();
  Parser parser = DefaultFactory.createParser();

  parser.parse(ctx, in);

  Document doc = ctx.getDocument();

  Writer writer = DefaultFactory.getWriter();

  writer.write(doc, System.out);


If you wish to take action as the dsml document is parsed rather than traverse the Document afterwards you can simply create your own implementation of ParseContext.

Parsing Example (SAX style):


  java.io.Reader in = /* Create a reader */

  ParseContext ctx = new MyCoolParseContext();
  Parser parser = DefaultFactory.createParser();

  parser.parse(ctx, in);
